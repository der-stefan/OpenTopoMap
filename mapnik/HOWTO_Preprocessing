###############################################
#   OpenTopoMap
#   (c) 2012-2016 Stefan Erhardt
#   https://github.com/der-stefan/OpenTopoMap
#
#   opentopomap.org
#
###############################################


HOWTO create a generalized database for low zoom levels
=======================================================

A guide by der-stefan (https://github.com/der-stefan/OpenTopoMap)
http://opentopomap.org

This guide is quite complete, but you should always think before blindly copying the commands.


# Create generalized database
	createdb lowzoom
	psql -d lowzoom -c "CREATE EXTENSION postgis;"
	psql -d lowzoom -c "CREATE EXTENSION dblink;"
	psql -d gis -c "CREATE EXTENSION dblink;"
	
	
	# water
	psql -d gis -c "CREATE VIEW lowzoom_water AS SELECT ST_SimplifyPreserveTopology(way,150) AS way,name,\"natural\",waterway,way_area FROM planet_osm_polygon WHERE (\"natural\" = 'water' OR waterway = 'riverbank' OR water='lake') AND way_area > 50000;"
	psql -d lowzoom -c "CREATE TABLE water (way geometry(Geometry,3857), name text, \"natural\" text, waterway text, way_area real);"
	psql -d lowzoom -c "INSERT INTO water SELECT * FROM dblink('dbname=gis','SELECT * FROM lowzoom_water') AS t(way geometry(Geometry,3857), name text, \"natural\" text, waterway text, way_area real);"
	
	
	# landuse
	psql -d gis -c "CREATE VIEW lowzoom_landuse AS SELECT ST_SimplifyPreserveTopology(way,150) AS way,landuse,\"natural\" FROM planet_osm_polygon WHERE landuse = 'forest' OR \"natural\" = 'wood' AND way_area > 50000"
	psql -d lowzoom -c "CREATE TABLE landuse (way geometry(Geometry,3857), landuse text, \"natural\" text);"
	psql -d lowzoom -c "INSERT INTO landuse SELECT * FROM dblink('dbname=gis','SELECT * FROM lowzoom_landuse') AS t(way geometry(Geometry,3857), landuse text, \"natural\" text);"
	
	
	# roads
	psql -d gis -c "CREATE VIEW lowzoom_roads AS SELECT ST_SimplifyPreserveTopology(way,100) AS way,highway,ref FROM planet_osm_line WHERE highway IN ('motorway','trunk','primary','secondary','tertiary','motorway_link','trunk_link','primary_link','secondary_link','tertiary_link');"
	psql -d lowzoom -c "CREATE TABLE roads (way geometry(LineString,3857), highway text, ref text);"
	psql -d lowzoom -c "INSERT INTO roads SELECT * FROM dblink('dbname=gis','SELECT * FROM lowzoom_roads') AS t(way geometry(LineString,3857), highway text, ref text);"


	# borders
	psql -d gis -c "CREATE VIEW lowzoom_borders AS SELECT ST_SimplifyPreserveTopology(way,150) AS way,boundary,admin_level FROM planet_osm_line WHERE boundary = 'administrative' AND admin_level IN ('2','4','5','6');"
	psql -d lowzoom -c "CREATE TABLE borders (way geometry(LineString,3857), boundary text, admin_level text);"
	psql -d lowzoom -c "INSERT INTO borders SELECT * FROM dblink('dbname=gis','SELECT * FROM lowzoom_borders') AS t(way geometry(LineString,3857), boundary text, admin_level text);"


	# railways
	psql -d gis -c "CREATE VIEW lowzoom_railways AS SELECT ST_SimplifyPreserveTopology(way,50) AS way,railway,\"service\",tunnel FROM planet_osm_line WHERE (\"service\" IS NULL AND railway IN ('rail','light_rail'));"
	psql -d lowzoom -c "CREATE TABLE railways (way geometry(LineString,3857), railway text, \"service\" text, tunnel text);"
	psql -d lowzoom -c "INSERT INTO railways SELECT * FROM dblink('dbname=gis','SELECT * FROM lowzoom_railways') AS t(way geometry(LineString,3857), railway text, \"service\" text, tunnel text);"
	
	
	# cities and towns
	psql -d gis -c "CREATE VIEW lowzoom_cities AS SELECT way,admin_level,name,capital,place,population::integer FROM planet_osm_point WHERE place IN ('city','town') AND (population IS NULL OR population SIMILAR TO '[[:digit:]]+') AND (population IS NULL OR population::integer > 5000);"
	psql -d lowzoom -c "CREATE TABLE cities (way geometry(Point,3857), admin_level text, name text, capital text, place text, population integer);"
	psql -d lowzoom -c "INSERT INTO cities SELECT * FROM dblink('dbname=gis','SELECT * FROM lowzoom_cities') AS t(way geometry(Point,3857), admin_level text, name text, capital text, place text, population integer);"
	
	
	







	
	

# below only tests, not necessary to execute
#########################################################################
	pgsql2shp -k -f waterways gis "SELECT ST_SimplifyPreserveTopology(way,100) AS way,\"CEMT\",intermittent,motorboat,waterway,tunnel FROM planet_osm_line WHERE \"CEMT\" IN ('IV','Va','Vb','VIa','VIb','VIc','VII') OR motorboat = 'yes'"
	ogr2ogr -explodecollections -a_srs epsg:3857 -append -f "PostgreSQL" 'PG:dbname='lowzoom'' -nln waterways waterways.shp
	
	pgsql2shp -k -f waterways-test gis "SELECT way FROM planet_osm_line JOIN (SELECT ltrim(member, 'w')::bigint AS osm_id FROM (SELECT unnest(members) AS member FROM planet_osm_rels WHERE ARRAY['waterway','river']<@tags) u WHERE member LIKE 'w%') x USING(osm_id)"
	
	SELECT way
	FROM planet_osm_line
	JOIN (
		SELECT ltrim(member, 'w')::bigint AS osm_id
		FROM (
			SELECT unnest(members) AS member, unnest()
			FROM planet_osm_rels
			WHERE ARRAY['waterway','river']<@tags
			) u
		WHERE member ~ '^w[0-9]+') x
	USING(osm_id);
	
	
======================================================
	pgsql2shp -k -f railways gis "SELECT ST_SimplifyPreserveTopology(way,50),railway,\"service\",tunnel FROM planet_osm_line WHERE (\"service\" IS NULL AND railway='rail')"


======================================================
	pgsql2shp -k -f rails-highspeed gis "SELECT way FROM planet_osm_line JOIN ( SELECT ltrim(member, 'w')::bigint AS osm_id FROM (SELECT unnest(members) AS member FROM planet_osm_rels WHERE ARRAY['route','train']<@tags AND ARRAY['service','high_speed']<@tags) u WHERE member ~ '^w[0-9]+') x USING(osm_id);"


	SELECT way
	FROM planet_osm_line
	JOIN (
		SELECT ltrim(member, 'w')::bigint AS osm_id
		FROM (
			SELECT unnest(members) AS member
			FROM planet_osm_rels
			WHERE ARRAY['route','train']<@tags AND ARRAY['service','high_speed']<@tags
			) u
		WHERE member ~ '^w[0-9]+') x
	USING(osm_id);
	
	
========================================================
	pgsql2shp -k -f waterways-test gis "SELECT way FROM planet_osm_line JOIN ( WITH numbered AS( SELECT row_number() OVER() AS row, entry FROM( SELECT unnest(members) AS entry FROM planet_osm_rels WHERE ARRAY['waterway','river']<@tags) AS mylist) SELECT ltrim(a.entry,'w')::bigint AS osm_id FROM numbered AS a JOIN numbered AS b ON a.row = b.row-1 AND b.entry = 'main_stream' WHERE a.entry ~ '^w[0-9]+') x USING(osm_id);"
	
	
	SELECT way FROM planet_osm_line
	JOIN (
			WITH numbered AS(
				SELECT row_number() OVER() AS row, entry
				FROM(
					SELECT unnest(members) AS entry
					FROM planet_osm_rels
					WHERE ARRAY['waterway','river']<@tags) AS mylist)
			SELECT ltrim(a.entry,'w')::bigint AS osm_id
			FROM numbered AS a JOIN numbered AS b
			ON a.row = b.row-1 AND b.entry = 'main_stream'
			WHERE a.entry ~ '^w[0-9]+'
	) x
	USING(osm_id);
		
	
========================================================
	pgsql2shp -k -f admin_centers gis "SELECT DISTINCT name FROM planet_osm_point JOIN (WITH numbered AS(SELECT row_number() OVER() AS row, entry FROM(SELECT unnest(members) AS entry FROM planet_osm_rels WHERE ARRAY['boundary','administrative']<@tags AND ARRAY['admin_level','2']<@tags) AS mylist) SELECT ltrim(a.entry,'n')::bigint AS osm_id FROM numbered AS a JOIN numbered AS b ON a.row = b.row-1 AND b.entry = 'admin_centre') x USING(osm_id)"


SELECT DISTINCT way,name FROM planet_osm_point
	JOIN (
			WITH numbered AS(
				SELECT row_number() OVER() AS row, entry
				FROM(
					SELECT unnest(members) AS entry
					FROM planet_osm_rels
					WHERE ARRAY['boundary','administrative']<@tags AND ARRAY['admin_level','2']<@tags) AS mylist)
			SELECT ltrim(a.entry,'n')::bigint AS osm_id
			FROM numbered AS a JOIN numbered AS b
			ON a.row = b.row-1 AND b.entry = 'admin_centre' WHERE a.entry ~ '^n[0-9]+'
	) x
	USING(osm_id);
	
========================================================

	SELECT name
	FROM planet_osm_point
	JOIN (
		SELECT ltrim(member, 'n')::bigint AS osm_id
		FROM (
			SELECT unnest(members) AS member
			FROM planet_osm_rels
			WHERE ARRAY['boundary','administrative']<@tags AND ARRAY['admin_level','6']<@tags) u
		WHERE member LIKE 'n%') x
	USING(osm_id);
	
	
	WITH numbered AS(
		SELECT row_number() OVER() AS row, entry
		FROM(
			SELECT unnest(members) AS entry
			FROM planet_osm_rels
			WHERE ARRAY['admin_level','2']<@tags AND ARRAY['boundary','administrative']<@tags) AS mylist)
		SELECT a.entry
		FROM numbered AS a JOIN numbered AS b
		ON a.row = b.row-1 AND b.entry = 'admin_centre';
		
		
	SELECT ltrim(member, 'n')::bigint AS osm_id
    FROM (
    	SELECT row_number() OVER() a AS row, unnest(members) AS member
    	FROM planet_osm_rels
		WHERE ARRAY['admin_level','2']<@tags AND ARRAY['boundary','administrative']<@tags) AS mylist
		
		
SELECT row_number() OVER() a AS row, unnest(members) AS member FROM planet_osm_rels WHERE ARRAY['admin_level','2']<@tags AND ARRAY['boundary','administrative']<@tags
		
		
	SELECT ltrim(member, 'n')::bigint AS osm_id
    	FROM (
    	SELECT row_number() OVER() a AS row, unnest(members) AS member
    	FROM planet_osm_rels
